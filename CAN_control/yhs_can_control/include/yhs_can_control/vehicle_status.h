// Generated by gencpp from file yhs_can_msgs/vehicle_status.msg
// DO NOT EDIT!


#ifndef YHS_CAN_MSGS_MESSAGE_VEHICLE_STATUS_H
#define YHS_CAN_MSGS_MESSAGE_VEHICLE_STATUS_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace yhs_can_msgs
{
template <class ContainerAllocator>
struct vehicle_status_
{
  typedef vehicle_status_<ContainerAllocator> Type;

  vehicle_status_()
    : header()
    , ctrl_fb_gear(0)
    , ctrl_fb_velocity(0.0)
    , ctrl_fb_steering(0.0)
    , ctrl_fb_Brake(0)
    , ctrl_fb_mode(0)
    , heading(0)
    , pitch(0)
    , roll(0)
    , lr_wheel_fb_velocity(0.0)
    , rr_wheel_fb_velocity(0)
    , poslon(0)
    , poslat(0)  {
    }
  vehicle_status_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , ctrl_fb_gear(0)
    , ctrl_fb_velocity(0.0)
    , ctrl_fb_steering(0.0)
    , ctrl_fb_Brake(0)
    , ctrl_fb_mode(0)
    , heading(0)
    , pitch(0)
    , roll(0)
    , lr_wheel_fb_velocity(0.0)
    , rr_wheel_fb_velocity(0)
    , poslon(0)
    , poslat(0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint8_t _ctrl_fb_gear_type;
  _ctrl_fb_gear_type ctrl_fb_gear;

   typedef float _ctrl_fb_velocity_type;
  _ctrl_fb_velocity_type ctrl_fb_velocity;

   typedef float _ctrl_fb_steering_type;
  _ctrl_fb_steering_type ctrl_fb_steering;

   typedef uint8_t _ctrl_fb_Brake_type;
  _ctrl_fb_Brake_type ctrl_fb_Brake;

   typedef uint8_t _ctrl_fb_mode_type;
  _ctrl_fb_mode_type ctrl_fb_mode;

   typedef uint16_t _heading_type;
  _heading_type heading;

   typedef int16_t _pitch_type;
  _pitch_type pitch;

   typedef int16_t _roll_type;
  _roll_type roll;

   typedef float _lr_wheel_fb_velocity_type;
  _lr_wheel_fb_velocity_type lr_wheel_fb_velocity;

   typedef int32_t _rr_wheel_fb_velocity_type;
  _rr_wheel_fb_velocity_type rr_wheel_fb_velocity;

   typedef int64_t _poslon_type;
  _poslon_type poslon;

   typedef int64_t _poslat_type;
  _poslat_type poslat;





  typedef boost::shared_ptr< ::yhs_can_msgs::vehicle_status_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::yhs_can_msgs::vehicle_status_<ContainerAllocator> const> ConstPtr;

}; // struct vehicle_status_

typedef ::yhs_can_msgs::vehicle_status_<std::allocator<void> > vehicle_status;

typedef boost::shared_ptr< ::yhs_can_msgs::vehicle_status > vehicle_statusPtr;
typedef boost::shared_ptr< ::yhs_can_msgs::vehicle_status const> vehicle_statusConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::yhs_can_msgs::vehicle_status_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::yhs_can_msgs::vehicle_status_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::yhs_can_msgs::vehicle_status_<ContainerAllocator1> & lhs, const ::yhs_can_msgs::vehicle_status_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.ctrl_fb_gear == rhs.ctrl_fb_gear &&
    lhs.ctrl_fb_velocity == rhs.ctrl_fb_velocity &&
    lhs.ctrl_fb_steering == rhs.ctrl_fb_steering &&
    lhs.ctrl_fb_Brake == rhs.ctrl_fb_Brake &&
    lhs.ctrl_fb_mode == rhs.ctrl_fb_mode &&
    lhs.heading == rhs.heading &&
    lhs.pitch == rhs.pitch &&
    lhs.roll == rhs.roll &&
    lhs.lr_wheel_fb_velocity == rhs.lr_wheel_fb_velocity &&
    lhs.rr_wheel_fb_velocity == rhs.rr_wheel_fb_velocity &&
    lhs.poslon == rhs.poslon &&
    lhs.poslat == rhs.poslat;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::yhs_can_msgs::vehicle_status_<ContainerAllocator1> & lhs, const ::yhs_can_msgs::vehicle_status_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace yhs_can_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::yhs_can_msgs::vehicle_status_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::yhs_can_msgs::vehicle_status_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::yhs_can_msgs::vehicle_status_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::yhs_can_msgs::vehicle_status_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::yhs_can_msgs::vehicle_status_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::yhs_can_msgs::vehicle_status_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::yhs_can_msgs::vehicle_status_<ContainerAllocator> >
{
  static const char* value()
  {
    return "50071a62b49ef65dbdf72ec15d4f1e95";
  }

  static const char* value(const ::yhs_can_msgs::vehicle_status_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x50071a62b49ef65dULL;
  static const uint64_t static_value2 = 0xbdf72ec15d4f1e95ULL;
};

template<class ContainerAllocator>
struct DataType< ::yhs_can_msgs::vehicle_status_<ContainerAllocator> >
{
  static const char* value()
  {
    return "yhs_can_msgs/vehicle_status";
  }

  static const char* value(const ::yhs_can_msgs::vehicle_status_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::yhs_can_msgs::vehicle_status_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header   header\n"
"uint8    ctrl_fb_gear  # 当前挡位\n"
"float32  ctrl_fb_velocity  # 车体反馈速度\n"
"float32  ctrl_fb_steering # 当前车体转向角反馈\n"
"uint8    ctrl_fb_Brake   # 车体速度反馈\n"
"uint8    ctrl_fb_mode   # 车体运行模式\n"
"uint16   heading        # 航向角 \n"
"int16    pitch          #俯仰角\n"
"int16    roll           #横滚角\n"
"float32  lr_wheel_fb_velocity # 左后轮车速\n"
"int32    rr_wheel_fb_velocity  # 右后轮车速\n"
"int64    poslon      #经度\n"
"int64    poslat      #纬度\n"
"# 后期可增加车辆其他信息 电池信息 \n"
"\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::yhs_can_msgs::vehicle_status_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::yhs_can_msgs::vehicle_status_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.ctrl_fb_gear);
      stream.next(m.ctrl_fb_velocity);
      stream.next(m.ctrl_fb_steering);
      stream.next(m.ctrl_fb_Brake);
      stream.next(m.ctrl_fb_mode);
      stream.next(m.heading);
      stream.next(m.pitch);
      stream.next(m.roll);
      stream.next(m.lr_wheel_fb_velocity);
      stream.next(m.rr_wheel_fb_velocity);
      stream.next(m.poslon);
      stream.next(m.poslat);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct vehicle_status_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::yhs_can_msgs::vehicle_status_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::yhs_can_msgs::vehicle_status_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "ctrl_fb_gear: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.ctrl_fb_gear);
    s << indent << "ctrl_fb_velocity: ";
    Printer<float>::stream(s, indent + "  ", v.ctrl_fb_velocity);
    s << indent << "ctrl_fb_steering: ";
    Printer<float>::stream(s, indent + "  ", v.ctrl_fb_steering);
    s << indent << "ctrl_fb_Brake: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.ctrl_fb_Brake);
    s << indent << "ctrl_fb_mode: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.ctrl_fb_mode);
    s << indent << "heading: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.heading);
    s << indent << "pitch: ";
    Printer<int16_t>::stream(s, indent + "  ", v.pitch);
    s << indent << "roll: ";
    Printer<int16_t>::stream(s, indent + "  ", v.roll);
    s << indent << "lr_wheel_fb_velocity: ";
    Printer<float>::stream(s, indent + "  ", v.lr_wheel_fb_velocity);
    s << indent << "rr_wheel_fb_velocity: ";
    Printer<int32_t>::stream(s, indent + "  ", v.rr_wheel_fb_velocity);
    s << indent << "poslon: ";
    Printer<int64_t>::stream(s, indent + "  ", v.poslon);
    s << indent << "poslat: ";
    Printer<int64_t>::stream(s, indent + "  ", v.poslat);
  }
};

} // namespace message_operations
} // namespace ros

#endif // YHS_CAN_MSGS_MESSAGE_VEHICLE_STATUS_H
